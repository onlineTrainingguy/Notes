1. Install nodejs
2. VSCode to be installed
3. In Google Chrome add Extension (React Developer Tools)
4. In VSCode add extension thunderClient (Alternate of Postman)
5. In VSCode add extension ES7 React/Redux/GraphQL/ReactNative Snippet (by dsznajder)- it is used for some shortcutkeys
6. In VSCode add extension Bracket Pair Colorizer ( it tells about opening/closing the brackets)
7. In VSCode add Auto Rename Tag ( if I have tag say example nav and if i change from nav to nav-bar the closing tag also get changed)
8. In VSCode live Server
9. In VSCode add extension Prettier-Code formatter
   ---Create ReactJs Application
   npx create-react-app my-app
   cd my-app
   npm start
10 In VSCode Settings Emmet:include Languages  --> Add item --> javascript  javascriptreact. In the code write div.Blank and then use Emmet
11. JSX is a JS with function which returns html(if you want to return morethan 1 html then use <> </>).Few things like class is ClassName
12. In App.js file we are using function which returns html so it is jsx
13. In this function we can write any html code and use {} for getting javascript variable. eg let name= "raman" and in the function use {name}
14. Import is used to import the files like import './App.css'
15. JSX is compiled with Babel
16. node_modules folder is the one which contains all the dependecies files which are required for react project. If you delete it, then it can be created using npm install command. In .gitignore file we add this folder because we need not to deploy this folder, it is taking care by appsetting.json file
17. To add bootstrap to ReactJS -> Add these lines to public-->index.html
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js" integrity="sha384-w76AqPfDkMBDXo30jS1Sgez6pr3x5MlQ1ZAGC+nuZB+EYdgRZgiwxhTBTkF7CXvN" crossorigin="anonymous"></script>
   In BootStrap search NavBar and copy paste code in App.js (Replace class with className and href="#" with href="/" 
   Terminate the app execution and run npm start command.
   Sample code for App.js

		import './App.css';

		function App() {
		  return (
			<>
			<nav className="navbar navbar-expand-lg bg-body-tertiary">
		  <div className="container-fluid">
			
			<div className="collapse navbar-collapse" id="navbarNav">
			  <ul className="navbar-nav">
				<li className="nav-item">
				  <a className="nav-link active" aria-current="page" href="/">Home</a>
				</li>
				<li className="nav-item">
				  <a className="nav-link" href="/">Features</a>
				</li>
				
			  </ul>
			</div>
		  </div>
		</nav>
			</>
		  );
		}

		export default App;
		   
18. Lets understand JS import and export
     create a file module1.js and add below code
	    const a="raman";
		const b="testing";
		const c= "Integration"
		const d="Production"
		export default b;
		export {a};
		export {c};
		export {d};
     create a file module2.js and add below code
		import ui,{a,c,d} from "./module1.mjs";
		console.log(ui);
		console.log(a);
		console.log(c);
		console.log(d);
 
	 Run the command node module2.js, it will throw the error and suggest that change the file name with .mjs extension so lets change the file name with module1.mjs and module2.mjs
	 Now run the command node module2.mjs and it should return .
			testing
			raman
			Integration
			Production
			
Props(ReadOnly): Properties which we pass to the components.
1. Create a folder components(optional) under src folder
2. Add a js file (NavBar.js) and use "rfc" to generate below code
   import React from 'react'

	export default function Navbar() {
	  return (
		<div>
		  Testing Navbar
		</div>
	  )
	}
			
3. Call NavBar function in App.js file by adding <Navbar /> .
4. Remove the content of App() and add it in NavBar function
     //import logo from './logo.svg';
		import './App.css';
		import Navbar from './components/Navbar';


		function App() {
		  return (
			<>
		   
		<Navbar />
			</>
		  );
		}

		export default App;
5. Add props in NavBar()
     import React from 'react'

	export default function Navbar(props) {
	  return (
		<>
		   <nav className="navbar navbar-expand-lg bg-body-tertiary">
	  <div className="container-fluid">
		
		<div className="collapse navbar-collapse" id="navbarNav">
		  <ul className="navbar-nav">
			<li className="nav-item">
			  <a className="nav-link active" aria-current="page" href="/">{props.home}</a>
			</li>
			<li className="nav-item">
			  <a className="nav-link" href="/">{props.feature}</a>
			</li>
			
		  </ul>
		</div>
	  </div>
	</nav>
		  </>
	  )
	}
6. Call this function with properties in App.js
   //import logo from './logo.svg';
	import './App.css';
	import Navbar from './components/Navbar';


	function App() {
	  return (
		<>
	   
	<Navbar home="Home" feature="New Feature" />
		</>
	  );
	}

	export default App;

7. Prototype: If you want to define the data type of the properties (impt). pts (Prototype.string). Write below code outside the function def
   Navbar.propTypes={ home: PropTypes.string,feature: PropTypes.string}	
8. In App.js pass these parameters
   //import logo from './logo.svg';
	import './App.css';
	import Navbar from './components/Navbar';


	function App() {
	  return (
		<>
	   
	<Navbar home="Home" feature="New Feature" />
		</>
	  );
	}

	export default App;
9.Some Experiments pass numeric value to home property and check the output in console log   
  <Navbar home={3} feature="New Feature" />
10. Set Default values to the properties
    In NavBar.js file
	 Navbar.propTypes={ home: PropTypes.string,feature: PropTypes.string}
		Navbar.defaultProps={
			home: "Set new Home",
			feature: "Set new Feature"
		}

   In App.js
   <Navbar />  
11. Set Required values.
    Navbar.propTypes={ home: PropTypes.string.isRequired,feature: PropTypes.string.isRequired}   
	If now you donot pass the values of home and feature it will throw the error in console log ( you need to remove default values also to test it)

Understanding State and handling events
To change the value in the components we use state
1. Create a component called TextForm.js under components folder
2. useState is used for state change of variable
   set Method is used (setText is an example) to change the state or value state variable you cannot use text="some value"
   In below example Textarea is bound to variable text and on changeEvent value of text is getting changed
   On Click on button I am calling a javascript function to change the text to upper case.
   
		import React,{useState} from 'react'


export default function Textform(props) {

    const [text,setText]  =useState('Enter text here');
    const handleUpClick =()=>{
        console.log("Upper Case was clicked");
        //setText("you have changed the text");
        setText(text.toUpperCase());
    }
    const handlelowClick =()=>{
        console.log("Upper Case was clicked");
        //setText("you have changed the text");
        setText(text.toLowerCase());
    }

    const changeEvent =(event)=>{
        console.log("Change done");
        setText(event.target.value);
    }
   
   //text='Enter text here ' wrong 
  return (
    <>    
<div>
    <h1>{props.heading}</h1>
    <div className="mb3">
        <label >Example textarea</label>
        <textarea className="form-control" onChange={changeEvent} value={text} id="exampleFormControlTextarea1" rows="3"></textarea>
    </div>
    <button className="btn btn-primary mx-2 " onClick={handleUpClick}>Convert to UpperCase</button>
    <button className="btn btn-success" onClick={handlelowClick}>Convert to lowercase</button>
    
</div>
<div className='container my-2'>
<h1>Preview</h1>
{text.split(" ").length} words, {text.length} <br />
{0.08*text.split(" ").length} mins to read
</div>
</>
  )
}

	///// App .js
			//import logo from './logo.svg';
		import './App.css';
		import Navbar from './components/Navbar';
		import Textform from './components/Textform';


		function App() {
		  return (
			<>
		   
		{/* <Navbar home="Home" feature="New Feature" /> */}
		<Navbar  />
		<Textform heading="Use State"/>
			</>
		  );


# Example of useState (Create a component About.js) --change the color of accordion by clicking on the button
import React, {useState} from 'react'

export default function About() {
    const [mystyle,setmyStyle]=useState({
        color: 'white',
        backgroundColor:'black'
    })
    const [btntext,setbtnText]=useState("Enable White");
    const changeColor=()=>{
        if(mystyle.backgroundColor==='black')
        {
            setmyStyle({
                color: 'black',
                backgroundColor: 'white'
            });
            setbtnText("Enable Black");
        }
        else
        {
            setmyStyle({
                color: 'white',
                backgroundColor: 'black'
            });
            setbtnText("Enable White");
        }
    }
  return (
    <>
    <div className="accordion" id="accordionExample" style={mystyle}>
  <div className="accordion-item" style={mystyle}>
    <h2 className="accordion-header" id="headingOne">
      <button className="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
        Accordion Item #1
      </button>
    </h2>
    <div id="collapseOne" className="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
      <div className="accordion-body">
        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
      </div>
    </div>
  </div>
  <div className="accordion-item" style={mystyle}>
    <h2 className="accordion-header" id="headingTwo" >
      <button className="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
        Accordion Item #2
      </button>
    </h2>
    <div id="collapseTwo" className="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#accordionExample">
      <div className="accordion-body">
        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
      </div>
    </div>
  </div>
  <div className="accordion-item" style={mystyle}>
    <h2 className="accordion-header" id="headingThree" >
      <button className="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
        Accordion Item #3
      </button>
    </h2>
    <div id="collapseThree" className="accordion-collapse collapse" aria-labelledby="headingThree" data-bs-parent="#accordionExample">
      <div className="accordion-body">
        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
      </div>
    </div>
  </div>
</div>
    <div className="container">
        <button className='btn btn-primary' onClick={changeColor}>{btntext}</button>
    </div>
    </>
  )
}

	      

			
